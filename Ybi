# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns

# Load the MNIST dataset
print("Loading MNIST dataset...")
mnist = fetch_openml('mnist_784', version=1)
X, y = mnist.data, mnist.target

# Convert target labels to integers
y = y.astype(int)

# Visualize a few examples
def plot_sample_images(X, y, samples=10):
    plt.figure(figsize=(10, 2))
    for index, (image, label) in enumerate(zip(X[:samples], y[:samples])):
        plt.subplot(1, samples, index + 1)
        plt.imshow(image.reshape(28, 28), cmap='gray')
        plt.axis('off')
        plt.title(f"Label: {label}")
    plt.show()

plot_sample_images(X, y)

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the pixel values (optional, but helps some models)
X_train = X_train / 255.0
X_test = X_test / 255.0

# Train a Random Forest Classifier
print("Training the model...")
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
print("Making predictions...")
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Visualize some predictions
def plot_predictions(X, y_actual, y_pred, samples=10):
    plt.figure(figsize=(10, 2))
    for index, (image, actual, pred) in enumerate(zip(X[:samples], y_actual[:samples], y_pred[:samples])):
        plt.subplot(1, samples, index + 1)
        plt.imshow(image.reshape(28, 28), cmap='gray')
        plt.axis('off')
        plt.title(f"A: {actual}\nP: {pred}", color="green" if actual == pred else "red")
    plt.show()

plot_predictions(X_test, y_test, y_pred)
